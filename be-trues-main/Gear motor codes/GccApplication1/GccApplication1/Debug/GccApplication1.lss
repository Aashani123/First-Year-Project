
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000795  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f8  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRD |= (15<<4);		//make portD 4-7 pins as output
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6f       	ori	r24, 0xF0	; 240
  70:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		unsigned int d=3000;
		
		//clock wise
		PORTD|=(1<<4);		//motor 1 on
  72:	82 b3       	in	r24, 0x12	; 18
  74:	80 61       	ori	r24, 0x10	; 16
  76:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f eb       	ldi	r18, 0xBF	; 191
  7a:	87 e2       	ldi	r24, 0x27	; 39
  7c:	99 e0       	ldi	r25, 0x09	; 9
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	80 40       	sbci	r24, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
		_delay_ms(d);
		PORTD&=~(1<<4);		//motor 1 off
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	8f 7e       	andi	r24, 0xEF	; 239
  8e:	82 bb       	out	0x12, r24	; 18
  90:	2f eb       	ldi	r18, 0xBF	; 191
  92:	87 e2       	ldi	r24, 0x27	; 39
  94:	99 e0       	ldi	r25, 0x09	; 9
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
		_delay_ms(d);
		PORTD|=(1<<6);		//motor 2 on
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	2f eb       	ldi	r18, 0xBF	; 191
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	99 e0       	ldi	r25, 0x09	; 9
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
		_delay_ms(d);
		PORTD&=~(1<<6);		//motor 2 off
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	8f 7b       	andi	r24, 0xBF	; 191
  be:	82 bb       	out	0x12, r24	; 18
  c0:	2f eb       	ldi	r18, 0xBF	; 191
  c2:	87 e2       	ldi	r24, 0x27	; 39
  c4:	99 e0       	ldi	r25, 0x09	; 9
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x5a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x64>
  d0:	00 00       	nop
		_delay_ms(d);
		
		//anti clock	
		PORTD|=(1<<5);		//motor 1 on
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	2f eb       	ldi	r18, 0xBF	; 191
  da:	87 e2       	ldi	r24, 0x27	; 39
  dc:	99 e0       	ldi	r25, 0x09	; 9
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x72>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x7c>
  e8:	00 00       	nop
		_delay_ms(d);
		PORTD&=~(1<<5);		//motor 1 off
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	2f eb       	ldi	r18, 0xBF	; 191
  f2:	87 e2       	ldi	r24, 0x27	; 39
  f4:	99 e0       	ldi	r25, 0x09	; 9
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x8a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x94>
 100:	00 00       	nop
		_delay_ms(d);
		PORTD|=(1<<7);		//motor 2 on
 102:	82 b3       	in	r24, 0x12	; 18
 104:	80 68       	ori	r24, 0x80	; 128
 106:	82 bb       	out	0x12, r24	; 18
 108:	2f eb       	ldi	r18, 0xBF	; 191
 10a:	87 e2       	ldi	r24, 0x27	; 39
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0xa2>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0xac>
 118:	00 00       	nop
		_delay_ms(d);
		PORTD&=~(1<<7);		//motor 2 off
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	82 bb       	out	0x12, r24	; 18
 120:	2f eb       	ldi	r18, 0xBF	; 191
 122:	87 e2       	ldi	r24, 0x27	; 39
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0xba>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xc4>
 130:	00 00       	nop
 132:	9f cf       	rjmp	.-194    	; 0x72 <main+0x6>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
